import matplotlib.pyplot as plt
import re
import streamlit as st
from vertexai.generative_models import GenerativeModel, GenerationConfig
import os
import base64
import logging

# Initialize the Gemini model globally (singleton pattern)
MODEL_ID = "gemini-2.0-flash-exp"
model = GenerativeModel(MODEL_ID)

# Initialize logging
logging.basicConfig(level=logging.INFO)

def needs_graphic(query, response):
    """Determine if a graph is needed."""
    prompt = f"""
    Query: {query}
    Response: {response}

    Considering the query and response above, would a graph be helpful to visualize the information? 
    Answer with a concise explanation of your reasoning.
    """

    try:
        # Generate a response from Gemini
        gemini_response = model.generate_content(
            prompt,
            generation_config=GenerationConfig(
                response_mime_type="text/plain"
            )
        ).text.lower()

        # Keywords for comparisons, trends, or multiple data points
        comparison_keywords = ["compare", "contrast", "difference", "similar", "greater than", "less than", "versus"]
        trend_keywords = ["trend", "growth", "decline", "increase", "decrease", "fluctuate", "change over time"]
        distribution_keywords = ["distribution", "spread", "range", "percentage", "proportion", "average"]

        # Check for keywords or multiple numeric values
        if any(keyword in query.lower() for keyword in comparison_keywords) or \
           any(keyword in query.lower() for keyword in trend_keywords) or \
           any(keyword in query.lower() for keyword in distribution_keywords) or \
           any(keyword in gemini_response for keyword in comparison_keywords) or \
           any(keyword in gemini_response for keyword in trend_keywords) or \
           any(keyword in gemini_response for keyword in distribution_keywords):
            return True

        if len([word for word in response.split() if word.isdigit()]) > 3:
            return True

        return False

    except Exception as e:
        logging.error(f"Error during the analysis: {e}")
        return False

def generate_graphic(query, response):
    """Generates a graphic and provides a download link."""
    # Construct the prompt for generating Python code to plot the graph
    prompt = f"""
    Query: {query}
    Response: {response}

    Generate Python code using matplotlib to create a graph 
    based on the information in the response. Ensure the graph 
    is clear, with labeled axes, a title, and a legend if needed.
    """
    
    try:
        # Generate the code from Gemini
        response_from_gemini = model.generate_content(
            prompt,
            generation_config=GenerationConfig(response_mime_type="text/plain")
        ).text

        # Extract Python code using regex
        match = re.search(r'```python(.*?)```', response_from_gemini, re.DOTALL)
        
        if match:
            code_snippet = match.group(1).strip()

            # Validate and compile the code
            compile(code_snippet, "<string>", "exec")

            # Execute the code
            exec(code_snippet)

            # Check if the figure is created
            if plt.get_fignums():
                # Save the figure
                image_path = 'generated_graph.png'
                plt.savefig(image_path)
                st.image(image_path, caption="Generated Graph")

                # Provide download link
                st.markdown(f"""
                <div style="text-align:center;">
                    <a href="data:file/png;base64,{get_file_base64(image_path)}" download="generated_graph.png">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/4/4e/Arrow_down_icon.svg" alt="Download" width="50">
                    </a>
                </div>
                """, unsafe_allow_html=True)

                return code_snippet
            else:
                logging.warning("No graph was generated by the provided code.")
                return None
        else:
            logging.warning("No valid Python code found in the generated response.")
            return None

    except SyntaxError as e:
        logging.error(f"Syntax error in generated code: {e}")
        return None
    except Exception as e:
        logging.error(f"Error during graphic generation: {e}")
        return None

def get_file_base64(file_path):
    """Convert a file to base64 for download."""
    with open(file_path, "rb") as file:
        return base64.b64encode(file.read()).decode()
